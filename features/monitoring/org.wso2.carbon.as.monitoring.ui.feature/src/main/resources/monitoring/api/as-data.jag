<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


include('constants.jag');

// define significant number of records to be displayed in charts
var BROWSER_SIGNIFICANT = 4;
var OS_SIGNIFICANT = 5;
var DEVICE_TYPE_SIGNIFICANT = 3;

// define sorting column id in tabular visualization
var BROWSER_SORT = 2;
var OS_SORT = 2;
var DEVICE_TYPE_SORT = 2;
var HTTP_RESPONSE_SORT = 2;
var LANGUAGE_SORT = 2;
var COUNTRY_SORT = 2;
var CONTEXT_SORT = 2;
var REFERRAL_SORT = 2;

var util = require('modules/as-data-util.js');
var action = request.getParameter('action');
var conditions = buildConditions();

var log = new Log("AS-DATA");

/*
 build the ammendment to the prepared statement along with the parameter values based on
 start_time, end_time, node and webapp
 */
function buildConditions() {
    // default data range is the past 24 hours
    var startTime = util.parseDateTime(request.getParameter('start_time')) || new Date() - 86400000;
    var endTime = util.parseDateTime(request.getParameter('end_time')) || new Date();
    var node = request.getParameter('node');
    var webapp = request.getParameter('appname');
    var conditions = [];

    conditions.push(TIME + ': {' + Math.floor(startTime / 1000) + ' TO ' + Math.ceil(endTime / 1000) + '}');

    if (node != null && node != 'All') {
        conditions.push(SERVER_ADDRESS + ': "' + node + '"');
    }
    if (webapp != null && webapp != 'null') {
        conditions.push(SERVICE_CLASS + ': "' + webapp + '"');
    }
    return conditions.join(' AND ');
}

function getNodeList() {
    var nodeList = require('modules/node-list.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving node list');
    }
    nodeList.getNodeList();
}

function getAppsStat() {
    var endTime;
    var appList = require('modules/app-list.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving applicaiton list');
    }
    endTime = util.parseDateTime(request.getParameter('end_time')) || new Date();
    appList.getAppsStat(conditions, Math.ceil(endTime / 1000));
}

function getHttpStatusStat() {
    var technologyStat = require('modules/technology-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving HTTP response code stat');
    }
    technologyStat.getHttpStatusStat(conditions);
}

function getHttpStatusTabularStat() {
    var technologyStat = require('modules/technology-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving HTTP response code stat - tabular');
    }
    technologyStat.getHttpStatusTabularStat(conditions, ['HTTP Response Code', 'Request Count',
                                                         'Percentage'], HTTP_RESPONSE_SORT);
}

function getContextStat() {
    var trafficStat = require('modules/traffic-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving context stat');
    }
    trafficStat.getTrafficStat(conditions, ['Resource method', 'Request Count', 'Percentage'],
            CONTEXT_SORT);
}

function getRequestStat() {
    var timeVaryingStat = require('modules/time-varying-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving request count stat');
    }
    timeVaryingStat.getTimeVaryingStat(conditions, 'request');
}

function getResponseStat() {
    var timeVaryingStat = require('modules/time-varying-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving response time stat');
    }
    timeVaryingStat.getTimeVaryingStat(conditions, 'response', '#bacf0b');
}

function getErrorStat() {
    var timeVaryingStat = require('modules/time-varying-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving error count stat');
    }
    timeVaryingStat.getTimeVaryingStat(conditions, 'error', '#e7912a');
}

function getInfoBoxRequestStat() {
    var infoBoxStat = require('modules/info-box-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving infobox stat - request count');
    }
    return infoBoxStat.getInfoBoxRequestStat(conditions);
}

function getInfoBoxResponseStat() {
    var infoBoxStat = require('modules/info-box-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving infobox stat - response time');
    }
    return infoBoxStat.getInfoBoxResponseStat(conditions);
}

function getInfoBoxSessionStat() {
    var infoBoxStat = require('modules/info-box-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving infobox stat - session count');
    }
    return infoBoxStat.getInfoBoxSessionStat(conditions);
}

function getInfoBoxErrorStat() {
    var infoBoxStat = require('modules/info-box-stat.js');
    if (log.isDebugEnabled()) {
        log.debug('Retrieving infobox stat - error count');
    }
    return infoBoxStat.getInfoBoxErrorStat(conditions);
}

var actionMapping = {
    'node-list': getNodeList,
    'apps': getAppsStat,
    'request': getRequestStat,
    'response': getResponseStat,
    'error': getErrorStat,
    'request-count': getInfoBoxRequestStat,
    'response-count': getInfoBoxResponseStat,
    'session-count': getInfoBoxSessionStat,
    'error-count': getInfoBoxErrorStat,
    'top-http-status': getHttpStatusStat,
    'top-http-status-tabular': getHttpStatusTabularStat,
    'context': getContextStat
};


if(actionMapping[action]) {
   actionMapping[action]();
}

%>