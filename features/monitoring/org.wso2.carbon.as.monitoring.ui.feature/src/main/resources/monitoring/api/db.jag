<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var log = new Log();
var config = require('/config/config.json');

var AUTHORIZATION_HEADER = "authorizationHeader";
var DAS_SERVICE_URL = "DASServiceUrl";
var DAS_USERNAME = "DASUsername";
var DAS_PASSWORD = "DASPassword";

/**
 * Use the REST API provided by DAS to retrieve summarized information.
 * *
 * @param tableName tabele name in DAS
 * @param query     query parameters as a string
 * @returns {*}     return the results of the REST API call
 */
function getDataFromDAS(tableName, query) {
    var dasServiceURL;
    var authorizationHeader;

    if (!(dasServiceURL = application.get(DAS_SERVICE_URL))) {
        dasServiceURL = getDASServiceURL();
        application.put(DAS_SERVICE_URL, dasServiceURL);
    }

    if (!(authorizationHeader = application.get(AUTHORIZATION_HEADER))) {
        authorizationHeader = getAuthorizationHeader();
        application.put(AUTHORIZATION_HEADER, authorizationHeader)
    }

    if (dasServiceURL && authorizationHeader) {
        var data = {
            "tableName": tableName,
            "query": query,
            "start": 0,
            "count": 100
        };

        var httpHeaders = {
            'Content-Type': 'application/json',
            'Authorization': 'Basic ' + authorizationHeader
        };

        var result = post(dasServiceURL, JSON.stringify(data), httpHeaders, "application/json");
        print(result.data);
        return result.data;

    } else {
        log.error("Either DAS Service URL or Authorization header is incorrect, please check.");
    }
}

/**
 * Get the DAS service URL from the configuration.
 *
 * @returns {string}    DAS service URL
 */
function getDASServiceURL() {
    var dasServiceURL = config[DAS_SERVICE_URL];

    if (!dasServiceURL) {
        log.error("DAS Service URL is not defined.");
        return;
    }

    return dasServiceURL + '/analytics/search';
}

/**
 * Return the base64 encoded value of the DAS username and password.
 *
 * @returns {*} base64 encoded username:password
 */
function getAuthorizationHeader() {
    var username = config[DAS_USERNAME];
    var password = config[DAS_PASSWORD];

    if (!username) {
        log.error("DAS username is not defined.");
        return;
    }

    if (!password) {
        log.error("DAS password is not defined.");
        return;
    }

    return javax.xml.bind.DatatypeConverter.printBase64Binary(new java.lang.String(username + ":" + password).getBytes());
}

%>