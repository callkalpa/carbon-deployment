<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var log = new Log("DB");
var config = require('/config/config.json');
var carbon = require('carbon');
include('constants.jag');

/**
 * Use the REST API provided by DAS to retrieve aggregated information.
 *
 * @param tableName         table name in DAS
 * @param query             query parameter as a string
 * @param aggregateLevel    aggregate level
 * @param facetField        facet field
 * @param aggregateFields   information about aggregated fields
 * @returns {*}
 */
function getAggregateDataFromDAS(tableName, query, aggregateLevel, facetField, aggregateFields) {

    if (!isTableExists(tableName)) {
        return;
    }
    
    var data = {
        "tableName": tableName,
        "query": query,
        "aggregateLevel": aggregateLevel,
        "groupByField": facetField,
        "aggregateFields": aggregateFields
    };

    return sendDASRequest(data, AGGREGATE_RESOURCE, 'POST');

}

/**
 * Use the REST API provided by DAS to retrieve all data from a table.
 *
 * @param tableName         table name in DAS
 */
function getAllDataFromDAS(tableName) {
    if (!isTableExists(tableName)) {
        return;
    }

    return sendDASRequest("", TABLE_RESOURCE + '/' + tableName, 'GET');
}

/**
 * This method checks the existence of the given table in DAS.
 *
 * @param tableName         table name in DAS
 */
function isTableExists(tableName) {
    var result;

    if (application.get(DAS_TABLES) == null) {
        application.put(DAS_TABLES, []);
    }

    if (application.get(DAS_TABLES).indexOf(tableName) > -1) {
        return true;
    }

    result = JSON.parse(sendDASRequest("", TABLE_EXISTS_RESOURCE + '?table=' + tableName, 'GET'));
    if (result['status'] == 'success') {
        application.get(DAS_TABLES).push(tableName);
        return true;
    }
    return false;

}

/**
 * Sends the reqeust to DAS
 *
 * @param data            payload for the POST request
 * @param restResource    restResource of DAS REST API (ex: aggregates, search)
 */
function sendDASRequest(data, restResource, httpMethod) {
    var dasServiceURL;
    var authorizationHeader;
    var result;

    if (!(dasServiceURL = application.get(DAS_SERVICE_URL))) {
        dasServiceURL = getDASServiceURL();
        application.put(DAS_SERVICE_URL, dasServiceURL);
    }

    if (!(authorizationHeader = application.get(AUTHORIZATION_HEADER))) {
        authorizationHeader = getAuthorizationHeader();
        application.put(AUTHORIZATION_HEADER, authorizationHeader)
    }

    if (dasServiceURL && authorizationHeader) {
        var httpHeaders = {
            'Content-Type': 'application/json',
            'Authorization': 'Basic ' + authorizationHeader
        };

        if (httpMethod == 'POST'){
            result = post(dasServiceURL + restResource, JSON.stringify(data), httpHeaders, "application/json");
        } else {
            result = get(dasServiceURL + restResource, {}, httpHeaders, "application/json");
        }

        if (result) {
            return result.data;
        } else {
            log.warn("No data found for [request URL: " + dasServiceURL + ", data: " + data + "]");
        }
    } else {
        log.error("Either DAS Service URL or Authorization header is incorrect, please check.");

    }
}

/**
 * Get the DAS service URL from the configuration. If it is empty, set the service URL of the current server
 * as the DAS service URL.
 *
 * @returns {string}    DAS service URL
 */
function getDASServiceURL() {
    var dasServiceURL = config[DAS_SERVICE_URL];

    if (!dasServiceURL) {
        dasServiceURL = carbon.server.address('https');
    }

    return dasServiceURL + '/analytics/';
}

/**
 * Return the base64 encoded value of the DAS username and password.
 *
 * @returns {*} base64 encoded username:password
 */
function getAuthorizationHeader() {
    var username = config[DAS_USERNAME];
    var password = config[DAS_PASSWORD];

    if (!username) {
        log.error("DAS username is not defined.");
        return;
    }

    if (!password) {
        log.error("DAS password is not defined.");
        return;
    }

    return javax.xml.bind.DatatypeConverter.printBase64Binary(new java.lang.String(username + ":" + password).getBytes());
}

%>